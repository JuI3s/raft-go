syntax = "proto3";
package rpc;

option go_package = "raft-go/rpc";

// RequestVote RPC Invoked by candidates to gather votes

message RequestVoteMesssageInput {
    // candidate’s term
    int32 term = 1;

    // candidate requesting vote
    int32 candidateId = 2;

    // index of candidate’s last log entry (§5.4) 
    int32 lastLogIndex = 3;

    // term of candidate’s last log entry (§5.4)
    int32 lastLogTerm = 4;
}

message RequestVoteMessageOutput {
    // currentTerm, for candidate to update itself
    int32 currentTerm = 1;

    // true means candidate received vote
    bool voteGranted = 2;
}

message AppendEntriesMessageInput {
    // leader’s term
    int32 term = 1;

    // so follower can redirect clients
    int32 leaderId = 2;

    // index of log entry immediately preceding new ones
    int32 prevLogIndex = 3;

    // log entries to store (empty for heartbeat; may send more than one for efficiency)
    repeated string entries = 4;

    // leader’s commitIndex
    int32 leaderCommit = 5;
}

message AppendEntriesMessageOutput { 
    // currentTerm, for leader to update itself
    int32 term = 1;

    // true if follower contained entry matching prevLogIndex and prevLogTerm
    bool success = 2;
}

service RpcService {
    rpc RequestVote(RequestVoteMesssageInput) returns (RequestVoteMessageOutput) {}
    rpc AppendEntries(AppendEntriesMessageInput) returns (AppendEntriesMessageOutput) {}
}
